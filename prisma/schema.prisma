generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider      = "zod-prisma"
    output        = "../app/models/schema/"
    relationModel = true

    modelCase = "PascalCase"

    modelSuffix = "Model"

    useDecimalJs = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Hull {
    id          Int       @id @default(autoincrement())
    created_at  DateTime? @default(now()) @db.Timestamptz(6)
    title       String?
    description String?
    pages       Json?     @db.Json
    // author      Profile?   @relation(fields: [authorId], references: [uuid])
    // authorId    String?
}

model Image {
    uuid    String @id @default(uuid())
    url     String
    block   Block  @relation(fields: [blockId], references: [uuid])
    blockId String @unique
}

model Sequence {
    uuid    String   @id @default(uuid())
    title   String
    steps   String[]
    block   Block    @relation(fields: [blockId], references: [uuid])
    blockId String   @unique
}

model Text {
    uuid    String @id @default(uuid())
    content String
    block   Block  @relation(fields: [blockId], references: [uuid])
    blockId String @unique
}

enum ColorMetaStates {
    PROJECT_BACKGROUND_LIGHT
    PROJECT_BACKGROUND_DARK
    PROJECT_ACCENT_COLOR
    JUST_A_BEAUTIFUL_COLOR
}

model Color {
    uuid    String          @id @default(uuid())
    hex     String
    name    String
    block   Block           @relation(fields: [blockId], references: [uuid])
    blockId String          @unique
    meta    ColorMetaStates @default(JUST_A_BEAUTIFUL_COLOR)
}

enum BlockSize {
    SM
    MD
    LG
    COVER
}

enum BlockAlignment {
    START
    CENTER
    END
}

model Block {
    /// The unique identifier for the post
    /// @default {Generated by database}
    uuid String @id @default(uuid())

    /// Index of the Block inside a project
    /// @zod.min(0)
    index Int

    /// width of the block
    width     BlockSize
    /// height of the block
    height    BlockSize
    /// alignment of the blocke
    alignment BlockAlignment

    project   Project @relation(fields: [projectId], references: [uuid])
    projectId String

    color    Color?
    image    Image?
    sequence Sequence?
    text     Text?
}

model Project {
    uuid        String   @id @default(uuid())
    createdAt   DateTime @default(now())
    name        String?
    description String?
    slug        String?  @unique
    index       Int
    owner       Profile  @relation(fields: [ownerId], references: [uuid])
    ownerId     String
    isPublic    Boolean
    isArchived  Boolean  @default(false)

    blocks Block[]
}

model Profile {
    uuid     String    @id
    email    String?
    name     String?
    projects Project[]
}
